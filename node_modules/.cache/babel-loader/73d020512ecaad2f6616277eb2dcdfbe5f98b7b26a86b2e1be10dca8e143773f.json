{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan\\\\Desktop\\\\FRONTEND_PROYECTO\\\\boceto_1\\\\src\\\\components\\\\Autenticacion.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Creamos un contexto para la autenticación, que compartirá el estado de autenticación en toda la aplicación\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para acceder al contexto de autenticación desde cualquier componente\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  // Lanzamos un error si `useAuth` se utiliza fuera de `AuthProvider`\n  if (!context) {\n    throw new Error('useAuth debe ser usado con el AuthProvider');\n  }\n  return context;\n};\n\n// Proveedor de contexto que maneja el estado de autenticación y rol del usuario\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  // `isAuthenticated` indica si el usuario está autenticado o no\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // `userRole` almacena el rol del usuario (ej. \"admin\", \"cliente\", \"artista\")\n  const [userRole, setUserRole] = useState(null);\n  const navigate = useNavigate(); // Hook para la navegación entre rutas\n\n  // `useEffect` ejecuta la lógica solo una vez al montar el componente, comprobando si el usuario ya está autenticado\n  useEffect(() => {\n    // Obtenemos la información de autenticación y rol del almacenamiento local\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    const storedRole = localStorage.getItem('userRole');\n\n    // Validamos si el usuario está autenticado y tiene un rol permitido\n    if (storedAuth === 'true' && storedRole && ['admin', 'cliente', 'artista'].includes(storedRole)) {\n      setIsAuthenticated(true); // Marcamos como autenticado\n      setUserRole(storedRole); // Asignamos el rol del usuario\n    } else {\n      // Si no hay autenticación válida, limpiamos el estado\n      setIsAuthenticated(false);\n      setUserRole(null);\n    }\n  }, []); // Se ejecuta solo una vez\n\n  // Función para redirigir al usuario según su rol\n  const redirectUser = role => {\n    if (role === 'admin') {\n      navigate('/Admin'); // Redirige a la página de administrador\n    } else if (role === 'cliente') {\n      navigate('/PerfilUsuarioCliente'); // Redirige a la página de perfil de cliente\n    } else if (role === 'artista') {\n      navigate('/PerfilUsuarioArtista'); // Redirige a la página de perfil de artista\n    }\n  };\n\n  // Función de inicio de sesión, que acepta el rol como parámetro\n  const login = role => {\n    // Validamos si el rol es válido\n    if (!['admin', 'cliente', 'artista'].includes(role)) {\n      console.error('Rol de usuario inválido'); // Muestra un error si el rol no es válido\n      return;\n    }\n\n    // Guardamos los datos de autenticación en `localStorage`\n    localStorage.setItem('isAuthenticated', 'true');\n    localStorage.setItem('userRole', role);\n\n    // Actualizamos el estado de autenticación\n    setIsAuthenticated(true);\n    setUserRole(role);\n\n    // Redirigimos al usuario a la página correspondiente a su rol\n    redirectUser(role);\n  };\n\n  // Función de cierre de sesión\n  const logout = () => {\n    // Restablecemos el estado de autenticación\n    setIsAuthenticated(false);\n    setUserRole(null);\n    // Eliminamos la información de autenticación del `localStorage`\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('userRole');\n\n    // Redirigimos al usuario a la página principal\n    navigate('/');\n  };\n\n  // Proveedor del contexto que permite acceder a `isAuthenticated`, `userRole`, `login` y `logout`\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRole,\n      login,\n      logout\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"bRqylRnrMck4iAoUP3uTGwCm/wg=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userRole","setUserRole","navigate","storedAuth","localStorage","getItem","storedRole","includes","redirectUser","role","login","console","error","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Juan/Desktop/FRONTEND_PROYECTO/boceto_1/src/components/Autenticacion.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Creamos un contexto para la autenticación, que compartirá el estado de autenticación en toda la aplicación\r\nconst AuthContext = createContext();\r\n\r\n// Hook personalizado para acceder al contexto de autenticación desde cualquier componente\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  // Lanzamos un error si `useAuth` se utiliza fuera de `AuthProvider`\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado con el AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Proveedor de contexto que maneja el estado de autenticación y rol del usuario\r\nexport const AuthProvider = ({ children }) => {\r\n  // `isAuthenticated` indica si el usuario está autenticado o no\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  // `userRole` almacena el rol del usuario (ej. \"admin\", \"cliente\", \"artista\")\r\n  const [userRole, setUserRole] = useState(null);\r\n  const navigate = useNavigate(); // Hook para la navegación entre rutas\r\n\r\n  // `useEffect` ejecuta la lógica solo una vez al montar el componente, comprobando si el usuario ya está autenticado\r\n  useEffect(() => {\r\n    // Obtenemos la información de autenticación y rol del almacenamiento local\r\n    const storedAuth = localStorage.getItem('isAuthenticated');\r\n    const storedRole = localStorage.getItem('userRole');\r\n    \r\n    // Validamos si el usuario está autenticado y tiene un rol permitido\r\n    if (storedAuth === 'true' && storedRole && ['admin', 'cliente', 'artista'].includes(storedRole)) {\r\n      setIsAuthenticated(true); // Marcamos como autenticado\r\n      setUserRole(storedRole);  // Asignamos el rol del usuario\r\n    } else {\r\n      // Si no hay autenticación válida, limpiamos el estado\r\n      setIsAuthenticated(false);\r\n      setUserRole(null);\r\n    }\r\n  }, []); // Se ejecuta solo una vez\r\n\r\n  // Función para redirigir al usuario según su rol\r\n  const redirectUser = (role) => {\r\n    if (role === 'admin') {\r\n      navigate('/Admin'); // Redirige a la página de administrador\r\n    } else if (role === 'cliente') {\r\n      navigate('/PerfilUsuarioCliente'); // Redirige a la página de perfil de cliente\r\n    } else if (role === 'artista') {\r\n      navigate('/PerfilUsuarioArtista'); // Redirige a la página de perfil de artista\r\n    }\r\n  };\r\n\r\n  // Función de inicio de sesión, que acepta el rol como parámetro\r\n  const login = (role) => {\r\n    // Validamos si el rol es válido\r\n    if (!['admin', 'cliente', 'artista'].includes(role)) {\r\n      console.error('Rol de usuario inválido'); // Muestra un error si el rol no es válido\r\n      return;\r\n    }\r\n\r\n    // Guardamos los datos de autenticación en `localStorage`\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    localStorage.setItem('userRole', role);\r\n\r\n    // Actualizamos el estado de autenticación\r\n    setIsAuthenticated(true);\r\n    setUserRole(role);\r\n\r\n    // Redirigimos al usuario a la página correspondiente a su rol\r\n    redirectUser(role);\r\n  };\r\n\r\n  // Función de cierre de sesión\r\n  const logout = () => {\r\n    // Restablecemos el estado de autenticación\r\n    setIsAuthenticated(false);\r\n    setUserRole(null);\r\n    // Eliminamos la información de autenticación del `localStorage`\r\n    localStorage.removeItem('isAuthenticated');\r\n    localStorage.removeItem('userRole');\r\n\r\n    // Redirigimos al usuario a la página principal\r\n    navigate('/');\r\n  };\r\n\r\n  // Proveedor del contexto que permite acceder a `isAuthenticated`, `userRole`, `login` y `logout`\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRole, login, logout }}>\r\n      {children} {/* Renderiza los componentes hijos */}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}