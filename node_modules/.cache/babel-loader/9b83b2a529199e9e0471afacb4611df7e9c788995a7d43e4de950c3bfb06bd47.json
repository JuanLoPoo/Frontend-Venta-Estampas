{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan\\\\Desktop\\\\FRONTEND_PROYECTO\\\\boceto_1\\\\src\\\\components\\\\Autenticacion.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado con el AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRole, setUserRole] = useState(null);\n  const navigate = useNavigate();\n\n  // Verifica si el usuario está autenticado al cargar la página\n  useEffect(() => {\n    const token = localStorage.getItem('token'); // Obtener el JWT almacenado\n\n    if (token) {\n      // Si el token existe, decodificarlo (usando una librería como jwt-decode)\n      const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decodificar JWT (sin verificar)\n      const role = decodedToken.role; // Obtener el rol del usuario desde el JWT\n\n      setIsAuthenticated(true);\n      setUserRole(role);\n    } else {\n      setIsAuthenticated(false);\n      setUserRole(null);\n    }\n  }, []);\n\n  // Función para redirigir según el rol del usuario\n  const redirectUser = role => {\n    if (role === 'admin') {\n      navigate('/Admin');\n    } else if (role === 'cliente') {\n      navigate('/PerfilUsuarioCliente');\n    } else if (role === 'artista') {\n      navigate('/PerfilUsuarioArtista');\n    }\n  };\n\n  // Función para iniciar sesión (simulación)\n  const login = async (email, password, role) => {\n    // Simulación de autenticación: solo verificamos el rol, no las credenciales\n    try {\n      // Simulación de creación de un JWT falso\n      const token = btoa(JSON.stringify({\n        role\n      })); // Crear un JWT ficticio con el rol\n\n      // Guardamos el JWT en localStorage\n      localStorage.setItem('token', token);\n\n      // Decodificamos el token para obtener el rol\n      const decodedToken = JSON.parse(atob(token.split('.')[1]));\n      const userRole = decodedToken.role;\n\n      // Actualizamos el estado\n      setIsAuthenticated(true);\n      setUserRole(userRole);\n\n      // Redirigimos al usuario según su rol\n      redirectUser(userRole);\n    } catch (error) {\n      console.error('Error al simular el login:', error);\n    }\n  };\n\n  // Función para cerrar sesión\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUserRole(null);\n    localStorage.removeItem('token'); // Eliminar el JWT de localStorage\n\n    // Redirigimos al usuario a la página principal\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRole,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"bRqylRnrMck4iAoUP3uTGwCm/wg=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userRole","setUserRole","navigate","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","role","redirectUser","login","email","password","btoa","stringify","setItem","error","console","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Juan/Desktop/FRONTEND_PROYECTO/boceto_1/src/components/Autenticacion.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado con el AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Verifica si el usuario está autenticado al cargar la página\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token'); // Obtener el JWT almacenado\r\n\r\n    if (token) {\r\n      // Si el token existe, decodificarlo (usando una librería como jwt-decode)\r\n      const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decodificar JWT (sin verificar)\r\n      const role = decodedToken.role; // Obtener el rol del usuario desde el JWT\r\n\r\n      setIsAuthenticated(true);\r\n      setUserRole(role);\r\n    } else {\r\n      setIsAuthenticated(false);\r\n      setUserRole(null);\r\n    }\r\n  }, []);\r\n\r\n  // Función para redirigir según el rol del usuario\r\n  const redirectUser = (role) => {\r\n    if (role === 'admin') {\r\n      navigate('/Admin');\r\n    } else if (role === 'cliente') {\r\n      navigate('/PerfilUsuarioCliente');\r\n    } else if (role === 'artista') {\r\n      navigate('/PerfilUsuarioArtista');\r\n    }\r\n  };\r\n\r\n  // Función para iniciar sesión (simulación)\r\n  const login = async (email, password, role) => {\r\n    // Simulación de autenticación: solo verificamos el rol, no las credenciales\r\n    try {\r\n      // Simulación de creación de un JWT falso\r\n      const token = btoa(JSON.stringify({ role })); // Crear un JWT ficticio con el rol\r\n\r\n      // Guardamos el JWT en localStorage\r\n      localStorage.setItem('token', token);\r\n\r\n      // Decodificamos el token para obtener el rol\r\n      const decodedToken = JSON.parse(atob(token.split('.')[1]));\r\n      const userRole = decodedToken.role;\r\n\r\n      // Actualizamos el estado\r\n      setIsAuthenticated(true);\r\n      setUserRole(userRole);\r\n\r\n      // Redirigimos al usuario según su rol\r\n      redirectUser(userRole);\r\n    } catch (error) {\r\n      console.error('Error al simular el login:', error);\r\n    }\r\n  };\r\n\r\n  // Función para cerrar sesión\r\n  const logout = () => {\r\n    setIsAuthenticated(false);\r\n    setUserRole(null);\r\n    localStorage.removeItem('token'); // Eliminar el JWT de localStorage\r\n\r\n    // Redirigimos al usuario a la página principal\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRole, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}